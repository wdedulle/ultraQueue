; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\xback\Documents\Visual Studio 2010\Projects\Buffers\Buffers\CPU_Info.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	@__security_check_cookie@4:PROC
_CPU_Initialized DB 01H DUP (?)
	ALIGN	4

_CPUBrand DB	0dH DUP (?)
	ALIGN	4

_MMX	DB	01H DUP (?)
	ALIGN	4

_SSE	DB	01H DUP (?)
	ALIGN	4

_SSE2	DB	01H DUP (?)
	ALIGN	4

_SSE3	DB	01H DUP (?)
	ALIGN	4

_SSE41	DB	01H DUP (?)
	ALIGN	4

_SSE42	DB	01H DUP (?)
	ALIGN	4

_AVX	DB	01H DUP (?)
	ALIGN	4

_AES	DB	01H DUP (?)
	ALIGN	4

__64_BIT DB	01H DUP (?)
	ALIGN	4

_SpeedStep DB	01H DUP (?)
	ALIGN	4

_HyperThreading DB 01H DUP (?)
	ALIGN	4

_AmountLogicalCPU DD 01H DUP (?)
_AmountPhysicalCPU DD 01H DUP (?)
$SG-5	DB	'GenuineIntel', 00H
	ORG $+3
$SG-6	DB	'AuthenticAMD', 00H
PUBLIC	?GetCPUInfo@@YAXXZ				; GetCPUInfo
; Function compile flags: /Ogtpy
; File c:\users\xback\documents\visual studio 2010\projects\buffers\buffers\cpu_info.cpp
;	COMDAT ?GetCPUInfo@@YAXXZ
_TEXT	SEGMENT
_Flags$ = -16						; size = 16
?GetCPUInfo@@YAXXZ PROC					; GetCPUInfo, COMDAT

; 22   : {

	sub	esp, 16					; 00000010H
	push	ebx

; 23   : 	int Flags[4];
; 24   : 
; 25   : 	//Flags[0] = EAX
; 26   : 	//Flags[1] = EBX
; 27   : 	//Flags[2] = ECX
; 28   : 	//Flags[3] = EDX
; 29   : 
; 30   : 	CPU_Initialized = false;

	mov	BYTE PTR _CPU_Initialized, 0

; 31   : 
; 32   : 	//Get CPU Name
; 33   : 	__asm
; 34   : 	{
; 35   : 		XOR ECX,ECX;	//ECX must be 0

	xor	ecx, ecx

; 36   : 		MOV EAX,0;

	mov	eax, 0

; 37   : 		CPUID;

	cpuid

; 38   : 		MOV	Flags[0], EAX

	mov	DWORD PTR _Flags$[esp+20], eax

; 39   : 		MOV	Flags[4], EBX

	mov	DWORD PTR _Flags$[esp+24], ebx

; 40   : 		MOV	Flags[8], ECX

	mov	DWORD PTR _Flags$[esp+28], ecx

; 41   : 		MOV	Flags[12], EDX

	mov	DWORD PTR _Flags$[esp+32], edx

; 42   : 	}
; 43   : 
; 44   : 	memcpy(&CPUBrand[0],&Flags[1],4);

	mov	eax, DWORD PTR _Flags$[esp+24]

; 45   : 	memcpy(&CPUBrand[4],&Flags[3],4);

	mov	ecx, DWORD PTR _Flags$[esp+32]

; 46   : 	memcpy(&CPUBrand[8],&Flags[2],4);

	mov	edx, DWORD PTR _Flags$[esp+28]
	mov	DWORD PTR _CPUBrand, eax
	mov	DWORD PTR _CPUBrand+4, ecx
	mov	DWORD PTR _CPUBrand+8, edx

; 47   : 
; 48   : 	//Get CPU Features
; 49   : 	__asm
; 50   : 	{
; 51   : 		XOR ECX,ECX;

	xor	ecx, ecx

; 52   : 		MOV EAX,1;

	mov	eax, 1

; 53   : 		CPUID;

	cpuid

; 54   : 		MOV	Flags[0], EAX

	mov	DWORD PTR _Flags$[esp+20], eax

; 55   : 		MOV	Flags[4], EBX

	mov	DWORD PTR _Flags$[esp+24], ebx

; 56   : 		MOV	Flags[8], ECX

	mov	DWORD PTR _Flags$[esp+28], ecx

; 57   : 		MOV	Flags[12], EDX

	mov	DWORD PTR _Flags$[esp+32], edx

; 58   : 	}
; 59   : 
; 60   : 	//HyperThreading (EDX - bit 28)
; 61   : 	if ((Flags[3] & 268435456)) HyperThreading = true;

	mov	ecx, DWORD PTR _Flags$[esp+32]
	mov	eax, ecx
	shr	eax, 28					; 0000001cH
	and	al, 1

; 62   : 	else HyperThreading = false;
; 63   : 
; 64   : 	//MMX (EDX - bit 23)
; 65   : 	if (Flags[3] & 8388608) MMX = true;

	mov	edx, ecx
	shr	edx, 23					; 00000017H
	and	dl, 1
	mov	BYTE PTR _MMX, dl
	mov	BYTE PTR _HyperThreading, al

; 66   : 	else MMX = false;
; 67   : 
; 68   : 	//SSE (EDX - bit 25)
; 69   : 	if (Flags[3] & 33554432) SSE = true;

	mov	eax, ecx
	shr	eax, 25					; 00000019H

; 70   : 	else SSE = false;
; 71   : 
; 72   : 	//SSE2 (EDX - bits 19 & 26)
; 73   : 	if ((Flags[3] & 67633152) == 67633152) SSE2 = true;

	mov	edx, ecx
	and	edx, 67633152				; 04080000H
	and	al, 1
	cmp	edx, 67633152				; 04080000H
	mov	BYTE PTR _SSE, al
	sete	al
	mov	BYTE PTR _SSE2, al

; 74   : 	else SSE2 = false;
; 75   : 
; 76   : 	//SSE3 (ECX - bits 0 & 3 & 9)
; 77   : 	if ((Flags[2] & 521) == 521) SSE3 = true;

	mov	eax, DWORD PTR _Flags$[esp+28]
	mov	edx, eax
	and	edx, 521				; 00000209H
	cmp	edx, 521				; 00000209H
	sete	dl
	mov	BYTE PTR _SSE3, dl

; 78   : 	else SSE3 = false;
; 79   : 
; 80   : 	//SSE4.1 (ECX - bit 19)
; 81   : 	if (Flags[2] & 524288) SSE41 = true;

	mov	edx, eax
	shr	edx, 19					; 00000013H
	and	dl, 1
	mov	BYTE PTR _SSE41, dl

; 82   : 	else SSE41 = false;
; 83   : 
; 84   : 	//SSE4.2 (ECX - bit 20)
; 85   : 	if (Flags[2] & 1048576) SSE42 = true;

	mov	edx, eax
	shr	edx, 20					; 00000014H
	and	dl, 1
	mov	BYTE PTR _SSE42, dl

; 86   : 	else SSE42 = false;
; 87   : 
; 88   : 	//AES (ECX - bit 25)
; 89   : 	if (Flags[2] & 33554432) AES = true;

	mov	edx, eax
	shr	edx, 25					; 00000019H
	and	dl, 1

; 90   : 	else AES = false;
; 91   : 
; 92   : 	//AVX (ECX - bit 28)
; 93   : 	if (Flags[2] & 268435456) AVX = true;
; 94   : 	else AVX = false;
; 95   : 
; 96   : 	//_64_BIT (EDX - bit 30)
; 97   : 	if (Flags[3] & 1073741824) _64_BIT = false;

	shr	ecx, 30					; 0000001eH
	mov	BYTE PTR _AES, dl
	not	cl
	mov	edx, eax
	and	cl, 1
	shr	edx, 28					; 0000001cH
	and	dl, 1
	mov	BYTE PTR __64_BIT, cl

; 98   : 	else _64_BIT = true;
; 99   : 
; 100  : 	//SpeedStep (ECX - bit 7)
; 101  : 	if (Flags[2] & 128) SpeedStep = true;
; 102  : 	else SpeedStep = false;
; 103  : 
; 104  : 	//Nr Of CPU's
; 105  : 	AmountLogicalCPU = Flags[1];
; 106  : 	AmountLogicalCPU &= 16711680;	//Only save bits [23:16]
; 107  : 	AmountLogicalCPU >>= 17;

	mov	ecx, DWORD PTR _Flags$[esp+24]
	test	al, -128				; ffffff80H
	setne	al
	sar	ecx, 17					; 00000011H
	and	ecx, 127				; 0000007fH
	mov	BYTE PTR _SpeedStep, al
	mov	DWORD PTR _AmountLogicalCPU, ecx
	mov	BYTE PTR _AVX, dl

; 108  : 
; 109  : 	if (!strcmp(CPUBrand,"GenuineIntel"))

	mov	ecx, OFFSET $SG-5
	mov	eax, OFFSET _CPUBrand
	npad	1
$LL28@GetCPUInfo:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN37@GetCPUInfo
	test	dl, dl
	je	SHORT $LN30@GetCPUInfo
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN37@GetCPUInfo
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL28@GetCPUInfo
$LN30@GetCPUInfo:
	xor	eax, eax
	jmp	SHORT $LN31@GetCPUInfo
$LN37@GetCPUInfo:
	sbb	eax, eax
	sbb	eax, -1
$LN31@GetCPUInfo:
	test	eax, eax
	jne	SHORT $LN3@GetCPUInfo

; 110  : 	{
; 111  : 		__asm
; 112  : 		{
; 113  : 			XOR ECX,ECX;

	xor	ecx, ecx

; 114  : 			MOV EAX,4;

	mov	eax, 4

; 115  : 			CPUID;

	cpuid

; 116  : 			AND EAX, 0xFC000000;

	and	eax, -67108864				; fc000000H

; 117  : 			SHR EAX, 27;

	shr	eax, 27					; 0000001bH

; 118  : 			INC EAX;

	inc	eax

; 119  : 			MOV AmountPhysicalCPU,EAX;

	mov	DWORD PTR _AmountPhysicalCPU, eax

; 131  : 		}
; 132  : 	}
; 133  : 	
; 134  : 	CPU_Initialized = true;

	mov	BYTE PTR _CPU_Initialized, 1
	pop	ebx

; 135  : }

	add	esp, 16					; 00000010H
	ret	0
$LN3@GetCPUInfo:

; 120  : 		}
; 121  : 	}
; 122  : 	else if (!strcmp(CPUBrand,"AuthenticAMD"))

	mov	ecx, OFFSET $SG-6
	mov	eax, OFFSET _CPUBrand
$LL32@GetCPUInfo:
	mov	dl, BYTE PTR [eax]
	cmp	dl, BYTE PTR [ecx]
	jne	SHORT $LN33@GetCPUInfo
	test	dl, dl
	je	SHORT $LN34@GetCPUInfo
	mov	dl, BYTE PTR [eax+1]
	cmp	dl, BYTE PTR [ecx+1]
	jne	SHORT $LN33@GetCPUInfo
	add	eax, 2
	add	ecx, 2
	test	dl, dl
	jne	SHORT $LL32@GetCPUInfo
$LN34@GetCPUInfo:
	xor	eax, eax
	jmp	SHORT $LN35@GetCPUInfo
$LN33@GetCPUInfo:
	sbb	eax, eax
	sbb	eax, -1
$LN35@GetCPUInfo:
	test	eax, eax
	jne	SHORT $LN36@GetCPUInfo

; 123  : 	{
; 124  : 		__asm
; 125  : 		{
; 126  : 			XOR ECX,ECX;

	xor	ecx, ecx

; 127  : 			MOV EAX,0x80000008;

	mov	eax, -2147483640			; 80000008H

; 128  : 			CPUID;

	cpuid

; 129  : 			AND ECX,0xFF;

	and	ecx, 255				; 000000ffH

; 130  : 			MOV	AmountPhysicalCPU,ECX;

	mov	DWORD PTR _AmountPhysicalCPU, ecx
$LN36@GetCPUInfo:

; 131  : 		}
; 132  : 	}
; 133  : 	
; 134  : 	CPU_Initialized = true;

	mov	BYTE PTR _CPU_Initialized, 1
	pop	ebx

; 135  : }

	add	esp, 16					; 00000010H
	ret	0
?GetCPUInfo@@YAXXZ ENDP					; GetCPUInfo
PUBLIC	?CheckCPUFeature@@YAHI@Z			; CheckCPUFeature
; Function compile flags: /Ogtpy
;	COMDAT ?CheckCPUFeature@@YAHI@Z
_TEXT	SEGMENT
?CheckCPUFeature@@YAHI@Z PROC				; CheckCPUFeature, COMDAT
; _Feature$ = esi

; 145  : 	if (!CPU_Initialized) GetCPUInfo();

	cmp	BYTE PTR _CPU_Initialized, 0
	jne	SHORT $LN28@CheckCPUFe
	call	?GetCPUInfo@@YAXXZ			; GetCPUInfo
$LN28@CheckCPUFe:

; 146  : 
; 147  : 	switch (Feature)

	cmp	esi, 12					; 0000000cH
	ja	SHORT $LN1@CheckCPUFe
	jmp	DWORD PTR $LN32@CheckCPUFe[esi*4]
$LN25@CheckCPUFe:

; 148  : 	{
; 149  : 		case 0 : if (MMX) return 1;

	cmp	BYTE PTR _MMX, 0
	je	SHORT $LN24@CheckCPUFe
$LN31@CheckCPUFe:
	mov	eax, 1

; 163  : 	}
; 164  : 
; 165  : 	return 0;
; 166  : }

	ret	0
$LN24@CheckCPUFe:

; 150  : 		case 1 : if (SSE) return 1;

	cmp	BYTE PTR _SSE, 0
	jne	SHORT $LN31@CheckCPUFe
$LN22@CheckCPUFe:

; 151  : 		case 2 : if (SSE2) return 1;

	cmp	BYTE PTR _SSE2, 0
	jne	SHORT $LN31@CheckCPUFe
$LN20@CheckCPUFe:

; 152  : 		case 3 : if (SSE3) return 1;

	cmp	BYTE PTR _SSE3, 0
	jne	SHORT $LN31@CheckCPUFe
$LN18@CheckCPUFe:

; 153  : 		case 4 : if (SSE41) return 1;

	cmp	BYTE PTR _SSE41, 0
	jne	SHORT $LN31@CheckCPUFe
$LN16@CheckCPUFe:

; 154  : 		case 5 : if (SSE42) return 1;

	cmp	BYTE PTR _SSE42, 0
	jne	SHORT $LN31@CheckCPUFe
$LN14@CheckCPUFe:

; 155  : 		case 6 : if (AVX) return 1;

	cmp	BYTE PTR _AVX, 0
	jne	SHORT $LN31@CheckCPUFe
$LN12@CheckCPUFe:

; 156  : 		case 7 : if (AES) return 1;

	cmp	BYTE PTR _AES, 0
	jne	SHORT $LN31@CheckCPUFe
$LN10@CheckCPUFe:

; 157  : 		case 8 : if (_64_BIT) return 1;

	cmp	BYTE PTR __64_BIT, 0
	jne	SHORT $LN31@CheckCPUFe
$LN8@CheckCPUFe:

; 158  : 		case 9 : if (SpeedStep) return 1;

	cmp	BYTE PTR _SpeedStep, 0
	jne	SHORT $LN31@CheckCPUFe
$LN6@CheckCPUFe:

; 159  : 		case 10 : if (HyperThreading) return 1;

	cmp	BYTE PTR _HyperThreading, 0
	jne	SHORT $LN31@CheckCPUFe
$LN4@CheckCPUFe:

; 160  : 		case 11 : return AmountLogicalCPU;

	mov	eax, DWORD PTR _AmountLogicalCPU

; 163  : 	}
; 164  : 
; 165  : 	return 0;
; 166  : }

	ret	0
$LN2@CheckCPUFe:

; 161  : 		case 12 : return AmountPhysicalCPU;

	mov	eax, DWORD PTR _AmountPhysicalCPU

; 163  : 	}
; 164  : 
; 165  : 	return 0;
; 166  : }

	ret	0
$LN1@CheckCPUFe:

; 162  : 		default : return -1;

	or	eax, -1

; 163  : 	}
; 164  : 
; 165  : 	return 0;
; 166  : }

	ret	0
	npad	1
$LN32@CheckCPUFe:
	DD	$LN25@CheckCPUFe
	DD	$LN24@CheckCPUFe
	DD	$LN22@CheckCPUFe
	DD	$LN20@CheckCPUFe
	DD	$LN18@CheckCPUFe
	DD	$LN16@CheckCPUFe
	DD	$LN14@CheckCPUFe
	DD	$LN12@CheckCPUFe
	DD	$LN10@CheckCPUFe
	DD	$LN8@CheckCPUFe
	DD	$LN6@CheckCPUFe
	DD	$LN4@CheckCPUFe
	DD	$LN2@CheckCPUFe
?CheckCPUFeature@@YAHI@Z ENDP				; CheckCPUFeature
END
