; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\xback\Documents\Visual Studio 2010\Projects\Buffers\Buffers\CPU_Info.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_BSS	SEGMENT
_CPU_Initialized DB 01H DUP (?)
	ALIGN	4

_CPUBrand DB	0dH DUP (?)
	ALIGN	4

_MMX	DB	01H DUP (?)
	ALIGN	4

_SSE	DB	01H DUP (?)
	ALIGN	4

_SSE2	DB	01H DUP (?)
	ALIGN	4

_SSE3	DB	01H DUP (?)
	ALIGN	4

_SSE41	DB	01H DUP (?)
	ALIGN	4

_SSE42	DB	01H DUP (?)
	ALIGN	4

_AVX	DB	01H DUP (?)
	ALIGN	4

_AES	DB	01H DUP (?)
	ALIGN	4

__64_BIT DB	01H DUP (?)
	ALIGN	4

_SpeedStep DB	01H DUP (?)
	ALIGN	4

_HyperThreading DB 01H DUP (?)
	ALIGN	4

_AmountLogicalCPU DD 01H DUP (?)
_AmountPhysicalCPU DD 01H DUP (?)
_BSS	ENDS
PUBLIC	??_C@_0N@FFJGBINN@AuthenticAMD?$AA@		; `string'
PUBLIC	??_C@_0N@BDDFKIGD@GenuineIntel?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?GetCPUInfo@@YAXXZ				; GetCPUInfo
EXTRN	_strcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_0N@FFJGBINN@AuthenticAMD?$AA@
; File c:\users\xback\documents\visual studio 2010\projects\buffers\buffers\cpu_info.cpp
CONST	SEGMENT
??_C@_0N@FFJGBINN@AuthenticAMD?$AA@ DB 'AuthenticAMD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BDDFKIGD@GenuineIntel?$AA@
CONST	SEGMENT
??_C@_0N@BDDFKIGD@GenuineIntel?$AA@ DB 'GenuineIntel', 00H ; `string'
; Function compile flags: /Odtp /ZI
CONST	ENDS
;	COMDAT ?GetCPUInfo@@YAXXZ
_TEXT	SEGMENT
_Flags$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?GetCPUInfo@@YAXXZ PROC					; GetCPUInfo, COMDAT

; 22   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi

; 23   : 	int Flags[4];
; 24   : 
; 25   : 	//Flags[0] = EAX
; 26   : 	//Flags[1] = EBX
; 27   : 	//Flags[2] = ECX
; 28   : 	//Flags[3] = EDX
; 29   : 
; 30   : 	CPU_Initialized = false;

	mov	BYTE PTR _CPU_Initialized, 0

; 31   : 
; 32   : 	//Get CPU Name
; 33   : 	__asm
; 34   : 	{
; 35   : 		XOR ECX,ECX;	//ECX must be 0

	xor	ecx, ecx

; 36   : 		MOV EAX,0;

	mov	eax, 0

; 37   : 		CPUID;

	cpuid

; 38   : 		MOV	Flags[0], EAX

	mov	DWORD PTR _Flags$[ebp], eax

; 39   : 		MOV	Flags[4], EBX

	mov	DWORD PTR _Flags$[ebp+4], ebx

; 40   : 		MOV	Flags[8], ECX

	mov	DWORD PTR _Flags$[ebp+8], ecx

; 41   : 		MOV	Flags[12], EDX

	mov	DWORD PTR _Flags$[ebp+12], edx

; 42   : 	}
; 43   : 
; 44   : 	memcpy(&CPUBrand[0],&Flags[1],4);

	push	4
	lea	eax, DWORD PTR _Flags$[ebp+4]
	push	eax
	push	OFFSET _CPUBrand
	call	_memcpy
	add	esp, 12					; 0000000cH

; 45   : 	memcpy(&CPUBrand[4],&Flags[3],4);

	push	4
	lea	eax, DWORD PTR _Flags$[ebp+12]
	push	eax
	push	OFFSET _CPUBrand+4
	call	_memcpy
	add	esp, 12					; 0000000cH

; 46   : 	memcpy(&CPUBrand[8],&Flags[2],4);

	push	4
	lea	eax, DWORD PTR _Flags$[ebp+8]
	push	eax
	push	OFFSET _CPUBrand+8
	call	_memcpy
	add	esp, 12					; 0000000cH

; 47   : 
; 48   : 	//Get CPU Features
; 49   : 	__asm
; 50   : 	{
; 51   : 		XOR ECX,ECX;

	xor	ecx, ecx

; 52   : 		MOV EAX,1;

	mov	eax, 1

; 53   : 		CPUID;

	cpuid

; 54   : 		MOV	Flags[0], EAX

	mov	DWORD PTR _Flags$[ebp], eax

; 55   : 		MOV	Flags[4], EBX

	mov	DWORD PTR _Flags$[ebp+4], ebx

; 56   : 		MOV	Flags[8], ECX

	mov	DWORD PTR _Flags$[ebp+8], ecx

; 57   : 		MOV	Flags[12], EDX

	mov	DWORD PTR _Flags$[ebp+12], edx

; 58   : 	}
; 59   : 
; 60   : 	//HyperThreading (EDX - bit 28)
; 61   : 	if ((Flags[3] & 268435456)) HyperThreading = true;

	mov	eax, DWORD PTR _Flags$[ebp+12]
	and	eax, 268435456				; 10000000H
	je	SHORT $LN25@GetCPUInfo
	mov	BYTE PTR _HyperThreading, 1
	jmp	SHORT $LN24@GetCPUInfo
$LN25@GetCPUInfo:

; 62   : 	else HyperThreading = false;

	mov	BYTE PTR _HyperThreading, 0
$LN24@GetCPUInfo:

; 63   : 
; 64   : 	//MMX (EDX - bit 23)
; 65   : 	if (Flags[3] & 8388608) MMX = true;

	mov	eax, DWORD PTR _Flags$[ebp+12]
	and	eax, 8388608				; 00800000H
	je	SHORT $LN23@GetCPUInfo
	mov	BYTE PTR _MMX, 1
	jmp	SHORT $LN22@GetCPUInfo
$LN23@GetCPUInfo:

; 66   : 	else MMX = false;

	mov	BYTE PTR _MMX, 0
$LN22@GetCPUInfo:

; 67   : 
; 68   : 	//SSE (EDX - bit 25)
; 69   : 	if (Flags[3] & 33554432) SSE = true;

	mov	eax, DWORD PTR _Flags$[ebp+12]
	and	eax, 33554432				; 02000000H
	je	SHORT $LN21@GetCPUInfo
	mov	BYTE PTR _SSE, 1
	jmp	SHORT $LN20@GetCPUInfo
$LN21@GetCPUInfo:

; 70   : 	else SSE = false;

	mov	BYTE PTR _SSE, 0
$LN20@GetCPUInfo:

; 71   : 
; 72   : 	//SSE2 (EDX - bits 19 & 26)
; 73   : 	if ((Flags[3] & 67633152) == 67633152) SSE2 = true;

	mov	eax, DWORD PTR _Flags$[ebp+12]
	and	eax, 67633152				; 04080000H
	cmp	eax, 67633152				; 04080000H
	jne	SHORT $LN19@GetCPUInfo
	mov	BYTE PTR _SSE2, 1
	jmp	SHORT $LN18@GetCPUInfo
$LN19@GetCPUInfo:

; 74   : 	else SSE2 = false;

	mov	BYTE PTR _SSE2, 0
$LN18@GetCPUInfo:

; 75   : 
; 76   : 	//SSE3 (ECX - bits 0 & 3 & 9)
; 77   : 	if ((Flags[2] & 521) == 521) SSE3 = true;

	mov	eax, DWORD PTR _Flags$[ebp+8]
	and	eax, 521				; 00000209H
	cmp	eax, 521				; 00000209H
	jne	SHORT $LN17@GetCPUInfo
	mov	BYTE PTR _SSE3, 1
	jmp	SHORT $LN16@GetCPUInfo
$LN17@GetCPUInfo:

; 78   : 	else SSE3 = false;

	mov	BYTE PTR _SSE3, 0
$LN16@GetCPUInfo:

; 79   : 
; 80   : 	//SSE4.1 (ECX - bit 19)
; 81   : 	if (Flags[2] & 524288) SSE41 = true;

	mov	eax, DWORD PTR _Flags$[ebp+8]
	and	eax, 524288				; 00080000H
	je	SHORT $LN15@GetCPUInfo
	mov	BYTE PTR _SSE41, 1
	jmp	SHORT $LN14@GetCPUInfo
$LN15@GetCPUInfo:

; 82   : 	else SSE41 = false;

	mov	BYTE PTR _SSE41, 0
$LN14@GetCPUInfo:

; 83   : 
; 84   : 	//SSE4.2 (ECX - bit 20)
; 85   : 	if (Flags[2] & 1048576) SSE42 = true;

	mov	eax, DWORD PTR _Flags$[ebp+8]
	and	eax, 1048576				; 00100000H
	je	SHORT $LN13@GetCPUInfo
	mov	BYTE PTR _SSE42, 1
	jmp	SHORT $LN12@GetCPUInfo
$LN13@GetCPUInfo:

; 86   : 	else SSE42 = false;

	mov	BYTE PTR _SSE42, 0
$LN12@GetCPUInfo:

; 87   : 
; 88   : 	//AES (ECX - bit 25)
; 89   : 	if (Flags[2] & 33554432) AES = true;

	mov	eax, DWORD PTR _Flags$[ebp+8]
	and	eax, 33554432				; 02000000H
	je	SHORT $LN11@GetCPUInfo
	mov	BYTE PTR _AES, 1
	jmp	SHORT $LN10@GetCPUInfo
$LN11@GetCPUInfo:

; 90   : 	else AES = false;

	mov	BYTE PTR _AES, 0
$LN10@GetCPUInfo:

; 91   : 
; 92   : 	//AVX (ECX - bit 28)
; 93   : 	if (Flags[2] & 268435456) AVX = true;

	mov	eax, DWORD PTR _Flags$[ebp+8]
	and	eax, 268435456				; 10000000H
	je	SHORT $LN9@GetCPUInfo
	mov	BYTE PTR _AVX, 1
	jmp	SHORT $LN8@GetCPUInfo
$LN9@GetCPUInfo:

; 94   : 	else AVX = false;

	mov	BYTE PTR _AVX, 0
$LN8@GetCPUInfo:

; 95   : 
; 96   : 	//_64_BIT (EDX - bit 30)
; 97   : 	if (Flags[3] & 1073741824) _64_BIT = false;

	mov	eax, DWORD PTR _Flags$[ebp+12]
	and	eax, 1073741824				; 40000000H
	je	SHORT $LN7@GetCPUInfo
	mov	BYTE PTR __64_BIT, 0
	jmp	SHORT $LN6@GetCPUInfo
$LN7@GetCPUInfo:

; 98   : 	else _64_BIT = true;

	mov	BYTE PTR __64_BIT, 1
$LN6@GetCPUInfo:

; 99   : 
; 100  : 	//SpeedStep (ECX - bit 7)
; 101  : 	if (Flags[2] & 128) SpeedStep = true;

	mov	eax, DWORD PTR _Flags$[ebp+8]
	and	eax, 128				; 00000080H
	je	SHORT $LN5@GetCPUInfo
	mov	BYTE PTR _SpeedStep, 1
	jmp	SHORT $LN4@GetCPUInfo
$LN5@GetCPUInfo:

; 102  : 	else SpeedStep = false;

	mov	BYTE PTR _SpeedStep, 0
$LN4@GetCPUInfo:

; 103  : 
; 104  : 	//Nr Of CPU's
; 105  : 	AmountLogicalCPU = Flags[1];

	mov	eax, DWORD PTR _Flags$[ebp+4]
	mov	DWORD PTR _AmountLogicalCPU, eax

; 106  : 	AmountLogicalCPU &= 16711680;	//Only save bits [23:16]

	mov	eax, DWORD PTR _AmountLogicalCPU
	and	eax, 16711680				; 00ff0000H
	mov	DWORD PTR _AmountLogicalCPU, eax

; 107  : 	AmountLogicalCPU >>= 17;

	mov	eax, DWORD PTR _AmountLogicalCPU
	sar	eax, 17					; 00000011H
	mov	DWORD PTR _AmountLogicalCPU, eax

; 108  : 
; 109  : 	if (!strcmp(CPUBrand,"GenuineIntel"))

	push	OFFSET ??_C@_0N@BDDFKIGD@GenuineIntel?$AA@
	push	OFFSET _CPUBrand
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@GetCPUInfo

; 112  : 		{
; 113  : 			XOR ECX,ECX;

	xor	ecx, ecx

; 114  : 			MOV EAX,4;

	mov	eax, 4

; 115  : 			CPUID;

	cpuid

; 116  : 			AND EAX, 0xFC000000;

	and	eax, -67108864				; fc000000H

; 117  : 			SHR EAX, 27;

	shr	eax, 27					; 0000001bH

; 118  : 			INC EAX;

	inc	eax

; 119  : 			MOV AmountPhysicalCPU,EAX;

	mov	DWORD PTR _AmountPhysicalCPU, eax

; 110  : 	{
; 111  : 		__asm

	jmp	SHORT $LN2@GetCPUInfo
$LN3@GetCPUInfo:

; 120  : 		}
; 121  : 	}
; 122  : 	else if (!strcmp(CPUBrand,"AuthenticAMD"))

	push	OFFSET ??_C@_0N@FFJGBINN@AuthenticAMD?$AA@
	push	OFFSET _CPUBrand
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@GetCPUInfo

; 123  : 	{
; 124  : 		__asm
; 125  : 		{
; 126  : 			XOR ECX,ECX;

	xor	ecx, ecx

; 127  : 			MOV EAX,0x80000008;

	mov	eax, -2147483640			; 80000008H

; 128  : 			CPUID;

	cpuid

; 129  : 			AND ECX,0xFF;

	and	ecx, 255				; 000000ffH

; 130  : 			MOV	AmountPhysicalCPU,ECX;

	mov	DWORD PTR _AmountPhysicalCPU, ecx
$LN2@GetCPUInfo:

; 131  : 		}
; 132  : 	}
; 133  : 	
; 134  : 	CPU_Initialized = true;

	mov	BYTE PTR _CPU_Initialized, 1

; 135  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCPUInfo@@YAXXZ ENDP					; GetCPUInfo
_TEXT	ENDS
PUBLIC	?GetCpuBrand@@YAXPAD@Z				; GetCpuBrand
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCpuBrand@@YAXPAD@Z
_TEXT	SEGMENT
_CPUbrand$ = 8						; size = 4
?GetCpuBrand@@YAXPAD@Z PROC				; GetCpuBrand, COMDAT

; 138  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	ebx
	push	esi
	push	edi

; 139  : 	if (!CPU_Initialized) GetCPUInfo();

	movzx	eax, BYTE PTR _CPU_Initialized
	test	eax, eax
	jne	SHORT $LN1@GetCpuBran
	call	?GetCPUInfo@@YAXXZ			; GetCPUInfo
$LN1@GetCpuBran:

; 140  : 	memcpy(CPUbrand,CPUBrand,12);

	push	12					; 0000000cH
	push	OFFSET _CPUBrand
	mov	eax, DWORD PTR _CPUbrand$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 141  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCpuBrand@@YAXPAD@Z ENDP				; GetCpuBrand
_TEXT	ENDS
PUBLIC	?CheckCPUFeature@@YAHI@Z			; CheckCPUFeature
; Function compile flags: /Odtp /ZI
;	COMDAT ?CheckCPUFeature@@YAHI@Z
_TEXT	SEGMENT
tv66 = -68						; size = 4
_Feature$ = 8						; size = 4
?CheckCPUFeature@@YAHI@Z PROC				; CheckCPUFeature, COMDAT

; 144  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi

; 145  : 	if (!CPU_Initialized) GetCPUInfo();

	movzx	eax, BYTE PTR _CPU_Initialized
	test	eax, eax
	jne	SHORT $LN28@CheckCPUFe
	call	?GetCPUInfo@@YAXXZ			; GetCPUInfo
$LN28@CheckCPUFe:

; 146  : 
; 147  : 	switch (Feature)

	mov	eax, DWORD PTR _Feature$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 12			; 0000000cH
	ja	$LN1@CheckCPUFe
	mov	ecx, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN31@CheckCPUFe[ecx*4]
$LN25@CheckCPUFe:

; 148  : 	{
; 149  : 		case 0 : if (MMX) return 1;

	movzx	eax, BYTE PTR _MMX
	test	eax, eax
	je	SHORT $LN23@CheckCPUFe
	mov	eax, 1
	jmp	$LN29@CheckCPUFe
$LN23@CheckCPUFe:

; 150  : 		case 1 : if (SSE) return 1;

	movzx	eax, BYTE PTR _SSE
	test	eax, eax
	je	SHORT $LN21@CheckCPUFe
	mov	eax, 1
	jmp	$LN29@CheckCPUFe
$LN21@CheckCPUFe:

; 151  : 		case 2 : if (SSE2) return 1;

	movzx	eax, BYTE PTR _SSE2
	test	eax, eax
	je	SHORT $LN19@CheckCPUFe
	mov	eax, 1
	jmp	$LN29@CheckCPUFe
$LN19@CheckCPUFe:

; 152  : 		case 3 : if (SSE3) return 1;

	movzx	eax, BYTE PTR _SSE3
	test	eax, eax
	je	SHORT $LN17@CheckCPUFe
	mov	eax, 1
	jmp	$LN29@CheckCPUFe
$LN17@CheckCPUFe:

; 153  : 		case 4 : if (SSE41) return 1;

	movzx	eax, BYTE PTR _SSE41
	test	eax, eax
	je	SHORT $LN15@CheckCPUFe
	mov	eax, 1
	jmp	$LN29@CheckCPUFe
$LN15@CheckCPUFe:

; 154  : 		case 5 : if (SSE42) return 1;

	movzx	eax, BYTE PTR _SSE42
	test	eax, eax
	je	SHORT $LN13@CheckCPUFe
	mov	eax, 1
	jmp	SHORT $LN29@CheckCPUFe
$LN13@CheckCPUFe:

; 155  : 		case 6 : if (AVX) return 1;

	movzx	eax, BYTE PTR _AVX
	test	eax, eax
	je	SHORT $LN11@CheckCPUFe
	mov	eax, 1
	jmp	SHORT $LN29@CheckCPUFe
$LN11@CheckCPUFe:

; 156  : 		case 7 : if (AES) return 1;

	movzx	eax, BYTE PTR _AES
	test	eax, eax
	je	SHORT $LN9@CheckCPUFe
	mov	eax, 1
	jmp	SHORT $LN29@CheckCPUFe
$LN9@CheckCPUFe:

; 157  : 		case 8 : if (_64_BIT) return 1;

	movzx	eax, BYTE PTR __64_BIT
	test	eax, eax
	je	SHORT $LN7@CheckCPUFe
	mov	eax, 1
	jmp	SHORT $LN29@CheckCPUFe
$LN7@CheckCPUFe:

; 158  : 		case 9 : if (SpeedStep) return 1;

	movzx	eax, BYTE PTR _SpeedStep
	test	eax, eax
	je	SHORT $LN5@CheckCPUFe
	mov	eax, 1
	jmp	SHORT $LN29@CheckCPUFe
$LN5@CheckCPUFe:

; 159  : 		case 10 : if (HyperThreading) return 1;

	movzx	eax, BYTE PTR _HyperThreading
	test	eax, eax
	je	SHORT $LN3@CheckCPUFe
	mov	eax, 1
	jmp	SHORT $LN29@CheckCPUFe
$LN3@CheckCPUFe:

; 160  : 		case 11 : return AmountLogicalCPU;

	mov	eax, DWORD PTR _AmountLogicalCPU
	jmp	SHORT $LN29@CheckCPUFe
$LN2@CheckCPUFe:

; 161  : 		case 12 : return AmountPhysicalCPU;

	mov	eax, DWORD PTR _AmountPhysicalCPU
	jmp	SHORT $LN29@CheckCPUFe
$LN1@CheckCPUFe:

; 162  : 		default : return -1;

	or	eax, -1
	jmp	SHORT $LN29@CheckCPUFe

; 163  : 	}
; 164  : 
; 165  : 	return 0;

	xor	eax, eax
$LN29@CheckCPUFe:

; 166  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN31@CheckCPUFe:
	DD	$LN25@CheckCPUFe
	DD	$LN23@CheckCPUFe
	DD	$LN21@CheckCPUFe
	DD	$LN19@CheckCPUFe
	DD	$LN17@CheckCPUFe
	DD	$LN15@CheckCPUFe
	DD	$LN13@CheckCPUFe
	DD	$LN11@CheckCPUFe
	DD	$LN9@CheckCPUFe
	DD	$LN7@CheckCPUFe
	DD	$LN5@CheckCPUFe
	DD	$LN3@CheckCPUFe
	DD	$LN2@CheckCPUFe
?CheckCPUFeature@@YAHI@Z ENDP				; CheckCPUFeature
_TEXT	ENDS
END
